import{f as c}from"./chunk-YEFHJ3IZ.js";import{a as l,d as p}from"./chunk-MQWEZ7RO.js";import{C as r}from"./chunk-HJVKZ4ZN.js";import{W as a,hb as o,ib as n,xa as d}from"./chunk-PVMRP42Y.js";import"./chunk-7CGTOI24.js";var u=(()=>{class e{static \u0275fac=function(t){return new(t||e)};static \u0275mod=n({type:e});static \u0275inj=a({imports:[r,r]})}return e})();var g=(()=>{class e{static \u0275fac=function(t){return new(t||e)};static \u0275mod=n({type:e});static \u0275inj=a({})}return e})();var h=(()=>{class e{static \u0275fac=function(t){return new(t||e)};static \u0275mod=n({type:e});static \u0275inj=a({imports:[r,g,c]})}return e})();var f=class e{apiDoc=d({mainFunction:{name:"restResource",description:"Creates a resource management system for RESTful APIs in Angular, providing functionality for CRUD operations with different strategies.",parameters:[{name:"apiEndpoint",type:"string",description:"The base URL for the REST API endpoint.",isOptional:!1},{name:"options",type:"RestResourceOptions<T, ID>",description:"Configuration options for the resource.",isOptional:!0,defaultValue:"{}"}],returnType:"Object",returnDescription:"An object containing signals and methods for managing the resource."},types:[{name:"RequestType",description:"Type of request that can be made to the resource.",values:["create","update","remove"]},{name:"Behavior",description:"Defines how requests are handled when multiple requests are made. Controls the RxJS flattening operator used for the HTTP request.",values:["concat","merge","switch","exhaust"]},{name:"Strategy",description:"Strategy for handling resource requests.",values:["optimistic","pessimistic","incremental"]}],interfaces:[{name:"RestResourceOptions<T, ID>",description:"Configuration options for the resource.",properties:[{name:"verbose",type:"boolean",description:"Whether to log verbose information to the console. This is useful for debugging and understanding the resource's behavior.",defaultValue:"false"},{name:"params",type:"() => string | undefined",description:"A reactive function which determines the request to be made. Whenever the params change, the loader will be triggered to fetch a new value for the resource."},{name:"idSelector",type:"(item: T) => ID",description:"Function to extract the ID from an item when the ID is not stored in the `id` field. Used to identify items for update and remove operations."},{name:"strategy",type:"Strategy",description:"The default strategy for the resource for every request type, it can be overridden by the request-type specific strategy.",defaultValue:"pessimistic"},{name:"create",type:"Object",description:"Configuration options for create operations.",properties:[{name:"behavior",type:"Behavior",description:"Defines how create requests are handled when multiple requests are made. Controls the RxJS flattening operator used for the HTTP request.",defaultValue:"concat"},{name:"strategy",type:"Strategy",description:"Determines whether changes are applied optimistically (before server confirmation) or pessimistically (after server confirmation) for create operations.",defaultValue:"The value of the global strategy option"},{name:"id",type:"Object",description:"Optionally generate a new item ID (if the target API does not handle this) and set it on the item.",properties:[{name:"generator",type:"() => ID",description:"A function that generates a new unique ID. Used when the backend does not assign one automatically."},{name:"setter",type:"(id: ID, item: Partial<T>) => void",description:"Custom logic for assigning the generated ID to the item, especially useful when the item's ID field is not named `id`."}]}]},{name:"update",type:"Object",description:"Configuration options for update operations.",properties:[{name:"behavior",type:"Behavior",description:"Defines how update requests are handled when multiple requests are made. Controls the RxJS flattening operator used for the HTTP request.",defaultValue:"concat"},{name:"strategy",type:"Strategy",description:"Determines whether changes are applied optimistically (before server confirmation) or pessimistically (after server confirmation) for update operations.",defaultValue:"The value of the global strategy option"}]},{name:"remove",type:"Object",description:"Configuration options for remove operations.",properties:[{name:"behavior",type:"Behavior",description:"Defines how remove requests are handled when multiple requests are made. Controls the RxJS flattening operator used for the HTTP request.",defaultValue:"concat"},{name:"strategy",type:"Strategy",description:"Determines whether changes are applied optimistically (before server confirmation) or pessimistically (after server confirmation) for remove operations.",defaultValue:"The value of the global strategy option"}]}]}],returnedProperties:[{name:"loadingInitial",type:"Signal<boolean>",description:"Signal indicating whether the initial data is being loaded."},{name:"loading",type:"Signal<boolean>",description:"Signal indicating whether any operation is in progress."},{name:"loadingCreate",type:"Signal<boolean>",description:"Signal indicating whether a create operation is in progress."},{name:"loadingUpdate",type:"Signal<boolean>",description:"Signal indicating whether an update operation is in progress."},{name:"loadingRemove",type:"Signal<boolean>",description:"Signal indicating whether a remove operation is in progress."},{name:"errorRead",type:"Signal<E | undefined>",description:"Signal containing any error that occurred during a read operation."},{name:"errorCreate",type:"Signal<E | undefined>",description:"Signal containing any error that occurred during a create operation."},{name:"errorUpdate",type:"Signal<E | undefined>",description:"Signal containing any error that occurred during an update operation."},{name:"errorRemove",type:"Signal<E | undefined>",description:"Signal containing any error that occurred during a remove operation."},{name:"value",type:"Signal<T | undefined>",description:"The value of the resource, ONLY if the resource is a single item. This is useful when building a resource to manage a single entity, e.g., detail view."},{name:"values",type:"Signal<T[] | undefined>",description:"The values of the resource (e.g., list of 0 to n items)."},{name:"hasValue",type:"Signal<boolean>",description:"Signal indicating whether the resource has a single value."},{name:"hasValues",type:"Signal<boolean>",description:"Signal indicating whether the resource has any values."}],returnedMethods:[{name:"reload",description:"Reloads the resource data from the server.",parameters:[],returnType:"void",returnDescription:"No return value."},{name:"create",description:"Creates a new item in the resource.",parameters:[{name:"item",type:"Partial<T>",description:"The item to create.",isOptional:!1}],returnType:"void",returnDescription:"No return value."},{name:"update",description:"Updates an existing item in the resource.",parameters:[{name:"item",type:"T",description:"The item to update.",isOptional:!1}],returnType:"void",returnDescription:"No return value."},{name:"remove",description:"Removes an item from the resource.",parameters:[{name:"item",type:"T",description:"The item to remove.",isOptional:!1}],returnType:"void",returnDescription:"No return value."},{name:"destroy",description:"Destroys the resource and cleans up any subscriptions.",parameters:[],returnType:"void",returnDescription:"No return value."}]});static \u0275fac=function(i){return new(i||e)};static \u0275cmp=o({type:e,selectors:[["showcase-api"]],decls:0,vars:0,template:function(i,t){},dependencies:[u,l,h,p],styles:["[_nghost-%COMP%]{display:block}"],changeDetection:0})};export{f as ApiComponent};
